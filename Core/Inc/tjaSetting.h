/*
 * tjaSetting.h
 *
 *  Created on: Jan 24, 2023
 *      Author: Petr Kolář
 */

#ifndef INC_TJASETTING_H_
#define INC_TJASETTING_H_

#include "main.h"
#include "stdbool.h"

#define T1_CHANNELS                 3
static const uint8_t ChanneloTjaAddr[] = {2 , 4,  3};
static const uint8_t TjaAddrToChannel[] = {0, 0,  1,  3,  2};
static const uint8_t TjaAddrToPort[] = {0, 0, 1,  3, 2 };
static const uint8_t PortToTjaAddr[] = {0, 2, 4,  3, 0};

#define TJA_CABLE_TEST_OPEN         1
#define TJA_CABLE_TEST_SHORT        2

/*Test mode 1 is used to test transmitter droop. In Test mode 1, the PHY transmits ‘+1’
symbols for 600 ns followed by ‘-1’ symbols for a further 600 ns. This sequence is
repeated continuously.*/
/*Test mode 2 is used to test transmitter timing jitter in Master mode. In Test mode 2, the
PHY transmits the data symbol sequence {+1, -1} repeatedly. The transmission of the
symbols is synchronized with the local external oscillator.*/
/*Test mode 3 is used to test transmitter timing jitter in Slave mode. In Test mode 3, the
PHY transmits the data symbol sequence {+1, -1} repeatedly. The transmission of the
symbols is synchronized with the local external oscillator.*/
/*Test mode 4 is used to test transmitter distortion. In Test mode 4, the PHY transmits the
sequence of symbols generated by the scrambler polynomial gs1 = 1 + x9 + x11.*/
/*Test mode 5 is used to test the transmit PSD mask. In Test mode 5, the PHY transmits a
random sequence of PAM-3 symbols.*/

typedef enum {
    NORMAL_MODE = 0,
    TEST_MODE_1,
    TEST_MODE_2,
    TEST_MODE_3,
    TEST_MODE_4,
    TEST_MODE_5,
    SCRAMBLER_DESCR_BYPASSED,
}t1Testmode_t;

typedef struct {
        uint8_t masterSlave;
        uint8_t linkUp;
        uint8_t testMode;
        uint8_t invertPolarity;
        uint8_t SQ;
        uint32_t linkErr;
        uint8_t port;
} t1Status_t;


/*
 * @brief Set master mode this function unlock and than lock the configuration
 * @param heth ethernet handler
 * @tjaAddr address of tja
 * @retval none
 */
void TjaSetMaster(ETH_HandleTypeDef * heth, uint32_t tjaAddr);

/*
 * @brief Set slave mode this function unlock and than lock the configuration
 * @param heth ethernet handler
 * @tjaAddr address of tja
 * @retval none
 */
void TjaSetSlave(ETH_HandleTypeDef * heth, uint32_t tjaAddr);

/*
 * @brief The device should be always locked after the unlock
 * @param heth ethernet handler
 * @tjaAddr address of tja
 * @retval none
 */
void TjaLock(ETH_HandleTypeDef * heth, uint32_t tjaAddr);

/*
 *  @brief The device always goes to the Standby mode and down link when Unlock is should be enabled before lock
 *  @param heth ethernet handler
 *  @param tjaAddr address of tja
 *  @retval none
 */
void TjaUnlock(ETH_HandleTypeDef * heth, uint32_t tjaAddr);

/*
 *  @brief Init TJA
 *  @param heth ethernet handler
 *  @param tjaAddr address of tja
 *  @retval none
 */
void TjaInit(ETH_HandleTypeDef * heth, uint32_t tjaAddr);

/*
 * @brief Read status registers for debug purpose
 * @param heth ethernet handler
 * @param tjaAddr address of tja
 * @retval none
 */
void TjaDiagnose(ETH_HandleTypeDef * heth, uint32_t tjaAddr);

/*
 * @brief Set up link control and normal operation mode.
 * @param heth ethernet handler
 * @param tjaAddr address of tja
 * @retval none
 */
void TjaLinkUpAndNormalMode(ETH_HandleTypeDef * heth, uint32_t tjaAddr);

/*
 * @brief Check is Tja is Master
 * @param heth ethernet handler
 * @param tjaAddr address of tja
 * @retval none
 */
bool TjaIsMaster(ETH_HandleTypeDef * heth, uint32_t tjaAddr);

/*
* @brief Check if Tja is Master
* @param heth ethernet handler
* @param tjaAddr address of tja
* @retval none
*/
bool TjaIsLinkUp(ETH_HandleTypeDef * heth, uint32_t tjaAddr);

/*
 * @brief Check if cable polarity is inverted
 * @param heth ethernet handler
 * @param tjaAddr address of tja
 * @retval true if polarity is inverted
 */
bool TjaIsPolarityInvert(ETH_HandleTypeDef * heth, uint32_t tjaAddr);

/*
 * @brief Enable the Test Mode
 * @param ETH_HandleTypeDef * heth
 * @param tjaAddr address of tja
 * @retval none
 */
void TjaSetTestMode(ETH_HandleTypeDef * heth, uint32_t tjaAddr, t1Testmode_t testMode);

/*
 * @brief Enable the Cable Test
 * @param ETH_HandleTypeDef * heth
 * @param tjaAddr address of tja
 * @retval none
 */
void TjaSetCableTest(ETH_HandleTypeDef * heth, uint32_t tjaAddr);

/*
 * @brief Check if the cable test is done. The length of cable test is approximately 100us. The function TjaSetCableTest must be called before the TjaGetCableTestResults.
 * @param heth ethernet handler
 * @param tjaAddr address of tja
 * @param polarityAndShortDetect
 * @retval 0 if done and results are valid 1 is cable test results are not ready
 */
uint8_t TjaGetCableTestResults(ETH_HandleTypeDef * heth, uint32_t tjaAddr, uint8_t * polarityAndShortDetect);

/*
 * @brief Check if the cable test is done. The length of cable test is approximately 100us.
 * @param heth ethernet handler
 * @param tjaAddr address of tja
 * @retval 0 if done and results are valid 1 is cable test results are not ready
 */
uint16_t TjaReadError(ETH_HandleTypeDef * heth, uint32_t tjaAddr);

/*
 * @brief set the activity led according to device status
 * @param heth ethernet handler
 * @param tjaAddr address of tja
 * @retval none
 */
void TjaSetLedActivity(uint32_t tjaAddr);
/*
 * @brief get the Signal Quality Index  -indicate signal quality index lower value means worst signal quality
 * @param heth ethernet handler
 * @param tjaAddr adress of tja
 * @retval none
 */
void TjaGetSqi(ETH_HandleTypeDef * heth, uint32_t tjaAddr);

/*
 * @brief Get actual status of device
 * @param tjaAddr address of tja
 * @retval status struct that described the device status
 *
 */
t1Status_t * GetStatusT1(uint32_t tjaAddr);

/*
 * @brief Perform the cable test the result is return as pTestResult. It waits with osdelay on test result.
 * @param heth ethernet handler
 * @param port T1 ethernet port
 * @param pTestResult result of test
 * @retval indicates if the test failed
 *
 */
uint8_t CableTestRun(ETH_HandleTypeDef * heth, uint8_t port, uint8_t * pTestResult);
#endif /* INC_TJASETTING_H_ */
